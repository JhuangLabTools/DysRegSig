% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DysReg_2.2.1.R
\name{combineDysReg}
\alias{combineDysReg}
\title{Search the best combination of dysregulations for building predictive signature.}
\usage{
combineDysReg(dysreg, exp.data, obj.func, pheno.data,
                     pop.size = 1000, select.rate=0.2, mut.rate = 0.1, add.rate=0.1, 
                     topN, train.rate = 0.6, iter=100)
}
\arguments{
\item{dysreg}{The dysregulations output from \code{DysReg}.}

\item{exp.data}{Expression matrix. Columns correspond to genes, rows correspond to experiments. The matrix is expected to be already normalized.}

\item{obj.func}{The objective function for genetic algorithm.}

\item{pheno.data}{The phenotype data corresponding to obj.func.}

\item{pop.size}{The size of populaiton generated in genetic algorithm.}

\item{select.rate}{The rate of selcting individual with good fitness from population.}

\item{mut.rate}{The rate of mutation.}

\item{add.rate}{The rate for adding individuals with not good fitness from population.}

\item{topN}{The top N individuals kept in each iteration.}

\item{train.rate}{The rate of sample for training model in cross-validation.}

\item{iter}{The times of iteration.}
}
\value{
The results of gene dysregulation analysis:
 \item{individ}{The combination of dysregulaitons.}
 \item{best.fitness}{The fitness value for each individual.}
}
\description{
Combine dysregulations for building predictive signature with genetic algorithm.
}
\examples{
\donttest{
data(exp)
exp[1:5,1:5]

data(tf2tar)
head(tf2tar)

group.1 <- clin_data$sample[which(clin_data$ResponseLevel == 'PD')]
exp.1 <- exp[,colnames(exp) \%in\% group.1]

group.2 <- clin_data$sample[which(clin_data$ResponseLevel \%in\% c('CR','PR','SD'))]
exp.2 <- exp[,colnames(exp) \%in\% group.2]

dysreg.out <- DysReg(exp.1 = exp.1, exp.2 = exp.2, tf2tar, 
                     de.genes = NULL, de.pval = 0.05, 
                     grn.method = 'Boruta', pValue = 0.01, ci = 0.90)

dysreg.res <- dysreg.out$dysreg
dysreg <- dysreg.res[,1:2]

data(clin_data)
head(clin_data)
pheno.data <- clin_data[,c(1,3,4)]
pheno.data <- pheno.data[!is.na(pheno.data$os) & !is.na(pheno.data$censOS),]

combdysreg.out <- combineDysReg(dysreg = dysreg, exp.data = exp,
                                obj.func = 'Obj.Cindex', pheno.data = pheno.data, 
                                pop.size = 1000, select.rate=0.2, 
                                mut.rate=0.1, add.rate=0.1, 
                                topN = 10, train.rate = 0.6, iter = 100)

best.fit <- combdysreg.out$best.fitness
best.individ <- combdysreg.out$individ
head(best.fit)
summary(best.fit$fitness)

##Check the individ with the best fitness
best.individ[which.max(best.fit$fitness),]
                                                                 
}

}
